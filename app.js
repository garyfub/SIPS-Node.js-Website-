//Module Dependencies
var express = require("express");
var app = express();
var bodyparser = require("body-parser");
var http = require('http').Server(app);
var io = require('socket.io')(http);
var path = require('path');
var namespace = require('express-namespace');
//Bluemix Mobile Cloud dependencies
var ibmbluemix = require('ibmbluemix');
var ibmpush = require('ibmpush');
var Cloudant = require('cloudant');
var ibmdb = require('ibm_db');
//Web App Dependencies
var cookieParser = require('cookie-parser');
var routes = require('./routes/index');
var users = require('./routes/users');
var forms = require('./routes/forms');

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');


var env = null;
var key = null;
var keySql = null;
var num = 0;

//Service to get account information for
var serviceName = 'CLOUDANTNOSQLDB';
var serviceName2 = 'SQLDB';


app.use(bodyparser.json())
app.use(bodyparser.urlencoded({
    extended: false
}))
app.use(cookieParser());

app.use('/', routes);
app.use('/users', users);
app.use('/forms', forms);
app.use(express.static(path.join(__dirname, 'public')));

var config = {
    // change to real application route assigned for your application        
    applicationRoute: "http://utc-vat.mybluemix.net",
    // change to real application key generated by Bluemix for your application        
    applicationId: "0a27a50e-8c7f-487d-9135-5b360732abbf"
};

// init core sdk
ibmbluemix.initialize(config);
var logger = ibmbluemix.getLogger();
var ibmconfig = ibmbluemix.getConfig(); //Getting context for app
//Basic GET test
app.get("/login", function (req, res) {
  //  res.status(200).send("GET, OK :D");
    res.sendFile( __dirname + "/public/webapp/" + "index.html" );
});


// init service sdks 
app.use(function (req, res, next) {
    // req.data = ibmdata.initializeService(req);
    //    req.ibmpush = ibmpush.initializeService(req);
    req.logger = logger;
    next();
});

// init basics for an express app
app.use(require('./lib/setup'));

//uncomment below code to protect endpoints created afterwards by MAS
//var mas = require('ibmsecurity')();
//app.use(mas);


logger.info('mbaas context root: ' + ibmconfig.getContextRoot());
// "Require" modules and files containing endpoints and apply the routes to our application
app.use(ibmconfig.getContextRoot(), require('./lib/accounts'));
app.use(ibmconfig.getContextRoot(), require('./lib/staticfile'));


http.listen(ibmconfig.getPort(), function () {
    console.log('Express server listening on port ' + ibmconfig.getPort());
});

//VCAP_SERVICES
function findKey(obj, lookup) {
    for (var i in obj) {
        if (typeof(obj[i]) === "object") {
            if (i.toUpperCase().indexOf(lookup) > -1) {
                // Found the key
                console.log("Key was found");
                return i;
            }
            findKey(obj[i], lookup);
        }
    }
    return -1;
}
if (process.env.VCAP_SERVICES) {
    env = JSON.parse(process.env.VCAP_SERVICES);
    key = findKey(env, serviceName);
    keySql = findKey(env, serviceName2);
}

//Get Bluemix Cloudant account credentials
var credentials = env[key][0].credentials;
var me = credentials.username;
var password = credentials.password;

//Get Bluemix SQL Database account credentials
var credentialsSQL = env[keySql][0].credentials;
var dsnString = "DRIVER={DB2};DATABASE=" + credentialsSQL.db + ";UID=" + credentialsSQL.username + ";PWD=" +
    credentialsSQL.password + ";HOSTNAME=" + credentialsSQL.hostname + ";port=" + credentialsSQL.port;


// Initialize Cloudant library.
var cloudant = Cloudant({account: me, password: password});


//Test of URI using app context
app.get(ibmconfig.getContextRoot() + '/test', function (req, res) {
    res.status(200).send("Test Complete"); //Removing status code affects the android app's response.

});

//Test if Cloudant databases are accessible. Displays name of databases on page and logs
app.get(ibmconfig.getContextRoot() + '/test1', function (req, res) {

    cloudant.db.list(function (err, allDbs) {
        console.log('All my databases: %s', allDbs.join(', '));
        res.status(200).send('All my databases: ' + allDbs.join(', ')); //Removing status code affects the android app's response.
    });

});

// Specify the database we are going to use
var datapoints = cloudant.db.use('utc-vat') // database is named utc-vat


io.of('/uploadcloudant').on('connection', function (socket) {
    socket.on('data', function (msg) {
        console.log("Socket connection made.");

        keyNames = Object.keys(msg); //Gets key names from object in array form
        //Print out key names to verify session object loaded
        for (var i in keyNames) {
            console.log("msg." + keyNames[i] + " in Cloudant");
        }


        // Insert a document into cloudant database specified above.
        datapoints.insert(msg, function (err, body, header) {
            if (err) {
                return console.log('[session.insert] ', err.message);
            }
            else {
                console.log('Insertion completed without error')
            }

        });
    });
});

ibmdb.open(dsnString, function (err, conn) {
    if (err) {
        response.write("error: ", err.message + "<br>\n");
        response.end();
        console.log("ERROR Test of VCAP_SERVICES ERROR");
    } else {
        console.log("Test of VCAP_SERVICES");

        io.of('/uploadsql').on('connection', function (socket) {
            socket.on('data', function (msg) {
                console.log("Socket connection made.");
                keyNames = Object.keys(msg); //Gets key names from object in array form
                var valueData = [];
                var num = 0;
                var valTotal = "";




                for (var key in msg) {
                    //Create Array that contains arrays of data in String format, removing JSON brackets and using a comma delimiter
                    //The internal arrays are in the same order as the key names in the object.
                    if (msg[key].charAt(0) == "[") {
                        valueData[num] = (msg[key].substring(1, msg[key].length - 1)).split(",");
                    }
                    else {
                        valueData[num] = msg[key];
                    }
                    //helps print out small substring of data after putting it back into string form.
                    for (var i in valueData) {
                        valTotal = valueData[i] + "," + valTotal;
                    }

                    num++; // go to next position in arrays
                }

                console.log("Num: " + num);



                var userID = valueData[0];
                var sessionID = valueData[1];
                var userInput = valueData[2];
                var accelx = valueData[3];
                var accely = valueData[4];
                var accelz = valueData[5];
                var tstmpA = valueData[6];
                var gyrox = valueData[7];
                var gyroy = valueData[8];
                var gyroz = valueData[9];
                var tstmpG = valueData[10];
                var magx = valueData[11];
                var magy = valueData[12];
                var magz = valueData[13];
                var tstmpM = valueData[14];
                //var testType = parseFloat(valueData[14]);


                //Add code to send to SQL Database here

                for (var i in keyNames) {
                    console.log("msg." + keyNames[i] + " in SQL ::" + valueData[i].length);

                }

                //io.emit('chat message', msgv); //Sends data to html if exists

                var lo = 0;

                //Preparing to excecute SQL command, ? are placements for values given in the execute command
                conn.prepare("INSERT INTO datapoints (ACCELTIMESTAMP, ACCELX, ACCELY, ACCELZ,  GYROTIMESTAMP, GYROX, GYROY, GYROZ, MAGTIMESTAMP, MAGX, MAGY, MAGZ, USERID, SESSIONID, SESSIONINFO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", function (err, stmt) {
                    if (err) {
                        //could not prepare for some reason
                        console.log(err);
                        return conn.closeSync();
                    }

                    console.log("SQL prepare command  - - DONE");


                    //Send data to database
                    for (var i = 0; i < tstmpA.length; i++) {
                        lo++;
                        try {
                            //Check if values are null and if so add 0
                            magx[i] = magx[i] != null ? magx[i] : 0;
                            magy[i] = magy[i] != null ? magy[i] : 0;
                            magz[i] = magz[i] != null ? magz[i] : 0;
                            tstmpM[i] = tstmpM[i] != null ? tstmpM[i] : 0;
                            gyrox[i] = gyrox[i] != null ? gyrox[i] : 0;
                            gyroy[i] = gyroy[i] != null ? gyroy[i] : 0;
                            gyroz[i] = gyroz[i] != null ? gyroz[i] : 0;
                            tstmpG[i] = tstmpG[i] != null ? tstmpG[i] : 0;
                            accelx[i] = accelx[i] != null ? accelx[i] : 0;
                            accely[i] = accely[i] != null ? accely[i] : 0;
                            accelz[i] = accelz[i] != null ? accelz[i] : 0;
                            tstmpA[i] = tstmpA[i] != null ? tstmpA[i] : 0;

                          //  console.log( lo + " - of - " + tstmpA.length);


                            stmt.execute([parseFloat(tstmpA[i]), parseFloat(accelx[i]), parseFloat(accely[i]), parseFloat(accelz[i]), parseFloat(tstmpG[i]), parseFloat(gyroy[i]), parseFloat(gyroy[i]), parseFloat(gyroz[i]), parseFloat(tstmpM[i]), parseFloat(magx[i]), parseFloat(magy[i]), parseFloat(magz[i]), String(userID), String(sessionID), String(userInput)], function (err, result) {
                                if (err) console.log(err);
                                else result.closeSync();
                            });


                        } catch (err) {
                            console.log("ERROR: " + err.message);
                        }
                    };

                    console.log("SQL Insert Command Complete  - - DONE");
                });
            });
        });
    }


    //COMBINED ENDPOINT
    //Uploads to Cloudant and SQL
    io.of('/upload').on('connection', function (socket) {
        socket.on('data', function (msg) {
            console.log("Socket connection made.");
            keyNames = Object.keys(msg); //Gets key names from object in array form
            var valueData = [];
            var num = 0;
            var valTotal = "";
            //Print out key names to verify session object loaded
            for (var i in keyNames) {
                console.log("msg." + keyNames[i] + " key found");
            }


            // Insert a document into cloudant database specified above.
            datapoints.insert(msg, function (err, body, header) {
                if (err) {
                    return console.log('[session.insert] ', err.message);
                }
                else {
                    console.log('Insertion completed without error - Cloudant')
                }

            });


            //SQL code

            var userID = msg.USERID;
            var sessionID = msg.SESSIONID;
            var userInput = msg.USERINPUT;
            var accelx = (msg.ACCELX.substring(1, msg.ACCELX.length - 1)).split(",");
            var accely = (msg.ACCELY.substring(1, msg.ACCELY.length - 1)).split(",");
            var accelz =(msg.ACCELZ.substring(1, msg.ACCELZ.length - 1)).split(",");
            var tstmpA = (msg.ACCELTIMESTAMP.substring(1, msg.ACCELTIMESTAMP.length - 1)).split(",");
            var gyrox = (msg.GYROX.substring(1, msg.GYROX.length - 1)).split(",");
            var gyroy = (msg.GYROY.substring(1, msg.GYROY.length - 1)).split(",");
            var gyroz = (msg.GYROZ.substring(1, msg.GYROZ.length - 1)).split(",");
            var tstmpG = (msg.GYROTIMESTAMP.substring(1, msg.GYROTIMESTAMP.length - 1)).split(",");
            var magx =(msg.MAGX.substring(1, msg.MAGX.length - 1)).split(",");
            var magy = (msg.MAGY.substring(1, msg.MAGY.length - 1)).split(",");
            var magz = (msg.MAGZ.substring(1, msg.MAGZ.length - 1)).split(",");
            var tstmpM = (msg.MAGTIMESTAMP.substring(1, msg.MAGTIMESTAMP.length - 1)).split(",");

            /*
            for (var key in msg) {
                //Create Array that contains arrays of data in String format, removing JSON brackets and using a comma delimiter
                //The internal arrays are in the same order as the key names in the object.
                if (msg[key].charAt(0) == "[") {
                    valueData[num] = (msg[key].substring(1, msg[key].length - 1)).split(",");
                }
                else {
                    valueData[num] = msg[key];
                }
                num++; // go to next position in arrays
            }
            */
            var lo = 0;

            //Preparing to excecute SQL command, ? are placements for values given in the execute command
            conn.prepare("INSERT INTO datapoints (ACCELTIMESTAMP, ACCELX, ACCELY, ACCELZ,  GYROTIMESTAMP, GYROX, GYROY, GYROZ, MAGTIMESTAMP, MAGX, MAGY, MAGZ, USERID, SESSIONID, SESSIONINFO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", function (err, stmt) {
                if (err) {
                    console.log(err);
                    return conn.closeSync();
                }

                console.log("SQL prepare command  - - DONE");

                //Send data to database
                for (var i = 0; i < tstmpA.length; i++) {
                    lo++;
                    try {
                        //Check if values are undefined at the position, if it is defined then check if null and if so add 0
                        if(magx[i] === 'undefined') {
                           magx.push("0");
                        }
                        else{
                            magx[i] = magx[i] != null ? magx[i] : "0";
                        }
                        if(magy[i] === 'undefined') {
                            magx.push("0");
                        }
                        else{
                            magy[i] = magy[i] != null ? magy[i] : "0";
                        }
                        if(magz[i] === 'undefined') {
                            magz.push("0");
                        }
                        else{
                            magz[i] = magz[i] != null ? magz[i] : "0";
                        }
                        if(tstmpM[i] === 'undefined') {
                            tstmpM.push("0");
                        }
                        else{
                            tstmpM[i] = tstmpM[i] != null ? tstmpM[i] : "0";
                        }
                        if(gyrox[i] === 'undefined') {
                            gyrox.push("0");
                        }
                        else{
                            gyrox[i] = gyrox[i] != null ? gyrox[i] : "0";
                        }
                        if(gyroy[i] === 'undefined') {
                            gyroy.push("0");
                        }
                        else{
                            gyroy[i] = gyroy[i] != null ? gyroy[i] : "0";
                        }
                        if(gyroz[i] === 'undefined') {
                            gyroz.push("0");
                        }
                        else{
                            gyroz[i] = gyroz[i] != null ? gyroz[i] : "0";
                        }
                        if(tstmpG[i] === 'undefined') {
                            tstmpG.push("0");
                        }
                        else{
                            tstmpG[i] = tstmpG[i] != null ? tstmpG[i] : "0";
                        }
                        if(accelx[i] === 'undefined') {
                           accelx.push("0");
                        }
                        else{
                            accelx[i] = accelx[i] != null ? accelx[i] : "0";
                        }
                        if(accely[i] === 'undefined') {
                            accely.push("0");
                        }
                        else{
                            accely[i] = accely[i] != null ? accely[i] : "0";
                        }
                        if(accelz[i] === 'undefined') {
                            accelz.push("0");
                        }
                        else{
                            accelz[i] = accelz[i] != null ? accelz[i] : "0";
                        }
                        if(tstmpA[i] === 'undefined') {
                            tstmpA.push("0");
                        }
                        else{
                            tstmpA[i] = tstmpA[i] != null ? tstmpA[i] : "0";
                        }

                      //  console.log( i + " - of - " + tstmpA.length); //Shows progress when uploading

                        stmt.execute([parseFloat(tstmpA[i]), parseFloat(accelx[i]), parseFloat(accely[i]), parseFloat(accelz[i]), parseFloat(tstmpG[i]), parseFloat(gyroy[i]), parseFloat(gyroy[i]), parseFloat(gyroz[i]), parseFloat(tstmpM[i]), parseFloat(magx[i]), parseFloat(magy[i]), parseFloat(magz[i]), String(userID), String(sessionID), String(userInput)], function (err, result) {
                            if (err){
                                console.log("ERROR: " + lo);
                                console.log(err);
                            }
                            else result.closeSync();

                        });

                    } catch (err) {
                        console.log("ERROR: " + err.message);
                    }
                };

                console.log('Insertion script complete');
            });
        });
    });
});


//BlueList Auth Sample Push notification code

/*

 //get context root to deploy your application
 //the context root is '${appHostName}/v1/apps/${applicationId}'
 var contextRoot = ibmconfig.getContextRoot();
 appContext=express.Router();
 app.use(contextRoot, appContext);

 console.log("contextRoot: " + contextRoot);

 // log all requests
 app.all('*', function(req, res, next) {
 console.log("Received request to " + req.url);
 next();
 });

 // create resource URIs
 // endpoint: https://mobile.ng.bluemix.net/${appHostName}/v1/apps/${applicationId}/notifyOtherDevices/
 appContext.post('/notifyOtherDevices', function(req,res) {
 var results = 'Sent notification to all registered devices successfully.';

 console.log("Trying to send push notification via JavaScript Push SDK");
 var message = { "alert" : "The data has been updated.",
 "url": "http://www.google.com"
 };

 req.ibmpush.sendBroadcastNotification(message,null).then(function (response) {
 console.log("Notification sent successfully to all devices.", response);
 res.send("Sent notification to all registered devices.");
 }, function(err) {
 console.log("Failed to send notification to all devices.");
 console.log(err);
 res.send(400, {reason: "An error occurred while sending the Push notification.", error: err});
 });
 });

 // host static files in public folder
 // endpoint:  https://mobile.ng.bluemix.net/${appHostName}/v1/apps/${applicationId}/static/
 appContext.use('/static', express.static('public'));

 //redirect to cloudcode doc page when accessing the root context
 app.get('/', function(req, res){
 res.sendfile('public/index.html');
 });



 */