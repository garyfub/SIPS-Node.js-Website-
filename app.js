//Module Dependencies
var pg = require("pg")
var app = require("express")();
var bodyparser = require("body-parser");
var http = require('http').Server(app);
var io = require('socket.io')(http);
var path = require('path');
var namespace = require('express-namespace');
//Bluemix Mobile Cloud dependencies
var ibmbluemix = require('ibmbluemix');
var ibmdata = require('ibmdata');
var ibmpush = require('ibmpush');
var num = 0;

app.use(bodyparser.json())
app.use(bodyparser.urlencoded({
    extended: true
}))

var config = {
    // change to real application route assigned for your application        
    applicationRoute: "http://utc-vat.mybluemix.net",
    // change to real application key generated by Bluemix for your application        
    applicationId: "0a27a50e-8c7f-487d-9135-5b360732abbf"
};

// init core sdk
ibmbluemix.initialize(config);
var logger = ibmbluemix.getLogger();
var ibmconfig = ibmbluemix.getConfig(); //Getting context for app
//Basic GET test
app.get("/", function(req, res) {
    res.status(200).send("GET, OK :D");
    res.sendfile('public/index.html');
});


// init service sdks 
app.use(function(req, res, next) {
    // req.data = ibmdata.initializeService(req);
    //    req.ibmpush = ibmpush.initializeService(req);
    req.logger = logger;
    next();
});

// init basics for an express app
app.use(require('./lib/setup'));

//uncomment below code to protect endpoints created afterwards by MAS
//var mas = require('ibmsecurity')();
//app.use(mas);



logger.info('mbaas context root: ' + ibmconfig.getContextRoot());
// "Require" modules and files containing endpoints and apply the routes to our application
app.use(ibmconfig.getContextRoot(), require('./lib/accounts'));
app.use(ibmconfig.getContextRoot(), require('./lib/staticfile'));


http.listen(ibmconfig.getPort(), function() {
    console.log('Express server listening on port ' + ibmconfig.getPort());
});




//Test of URI using app context
app.get(ibmconfig.getContextRoot() + '/test', function(req, res) {
    res.status(200).send("Test Complete"); //Removing status code affects the android app's response.

});

//Socket Test ////
/*
io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});

io.of('/upload').on('connection', function(socket){
  socket.on('data', function(msg){
	  //Print keys of object
    console.log('message: ' + Object.keys(msg));
	
	//Print values of object to html
    //console.log('message: ' + msg.VECTX);
  });
});
*/

//var database = new pg.Client("postgres://oissqfiq:nl1mY_7HmE6Tbu35j09tG_qRWSt98CyI@pellefant.db.elephantsql.com:5432/oissqfiq")
var database = new pg.Client("postgres://eiqghlkn:jI37df2QkRNfDd--AEQOZJ_Rz5l5cDsy@jumbo.db.elephantsql.com:5432/eiqghlkn")
database.connect(function(error) {
    if (error) {
        console.log(error)
    } else {


        //Test of URI using app context
        app.get(ibmconfig.getContextRoot() + '/upload', function(req, res) {
            res.status(200).send("Test Complete"); //Removing status code affects the android app's response.

        });

        io.of('/upload').on('connection', function(socket) {
            socket.on('data', function(msg) {
                console.log("Socket connection made.");
                keyNames = Object.keys(msg); //Gets key names from object in array form
                var valueData = [];
                var value = [];
                var data;
                var num = 0;
                var valTotal = "";


                for (var key in msg) {
                    //Create Array that contains arrays of data in String format, removing JSON brackets and using a comma delimiter
                    //The internal arrays are in the same order as the key names in the object.
                    valueData[num] = (msg[key].substring(1, msg[key].length - 1)).split(",");


                    //helps print out small substring of data after putting it back into string form.
                    for (var i in valueData) {
                        valTotal = valueData[i] + "," + valTotal;
                    }

                    console.log("msg." + key + " at pos " + num);

                    num++; // go to next position in arrays
                }

                //  num = 0; //reset

                var vectx = valueData[0];
                var vecty = valueData[1];
                var vectz = valueData[2];
                var tstmpV = valueData[3];
                var gyrox = valueData[4];
                var gyroy = valueData[5];
                var gyroz = valueData[6];
                var tstmpG = valueData[7];
                var accelx = valueData[8];
                var accely = valueData[9];
                var accelz = valueData[10];
                var tstmpA = valueData[11];




                //Add code to send to Postgres here

                for (var i in keyNames) {
                    console.log("msg." + keyNames[i]);

                }

                //io.emit('chat message', msgv); //Sends data to html if exists

				var lo = 0;
                //Send data to database
                for (var i = 0; i < tstmpA.length; i++) {
					lo++;
                    try {
                        //Check if values are null and if so add 0
                        vectx[i] = vectx[i] != null ? vectx[i] : 0;
                        vecty[i] = vecty[i] != null ? vecty[i] : 0;
                        vectz[i] = vectz[i] != null ? vectz[i] : 0;
                        tstmpV[i] = tstmpV[i] != null ? tstmpV[i] : 0;
                        gyrox[i] = gyrox[i] != null ? gyrox[i] : 0;
                        gyroy[i] = gyroy[i] != null ? gyroy[i] : 0;
                        gyroz[i] = gyroz[i] != null ? gyroz[i] : 0;
                        tstmpG[i] = tstmpG[i] != null ? tstmpG[i] : 0;
                        accelx[i] = accelx[i] != null ? accelx[i] : 0;
                        accely[i] = accely[i] != null ? accely[i] : 0;
                        accelz[i] = accelz[i] != null ? accelz[i] : 0;
                        tstmpA[i] = tstmpA[i] != null ? tstmpA[i] : 0;


                        database.query("INSERT INTO datapoints ( tstmpA, accelX, accelY, accelZ,  tstmpG, gyroX, gyroY, gyroZ, tstmpV, vectX, vectY, vectZ)"
                        			+ " VALUES (" + parseFloat(tstmpA[i]) + ', ' + parseFloat(accelx[i]) + ', ' + parseFloat(accely[i]) + ', ' + parseFloat(accelz[i]) + ', ' + parseFloat(tstmpG[i]) + ', ' + parseFloat(gyrox[i]) + ', ' + parseFloat(gyroy[i]) + ', ' + parseFloat(gyroz[i]) + ', ' + parseFloat(tstmpV[i]) + ', ' + parseFloat(vectx[i]) + ', ' + parseFloat(vecty[i]) + ', ' + parseFloat(vectz[i]) + ')');

                        console.log(tstmpA.length + " - - " + lo);
                    } catch (err) {
                        console.log("ERROR: " + err);
                    }
                }
            });
        });
    }
});




//BlueList Auth Sample Push notification code


//uncomment below code to protect endpoints created afterwards by MAS
//var mas = require('ibmsecurity')();
//app.use(mas);

/*
 
//initialize mbaas-config module
ibmbluemix.initialize(config);
var logger = ibmbluemix.getLogger();

app.use(function(req, res, next) {
	req.ibmpush = ibmpush.initializeService(req);
	req.logger = logger;
	next();
});

//initialize ibmconfig module
var ibmconfig = ibmbluemix.getConfig();

//get context root to deploy your application
//the context root is '${appHostName}/v1/apps/${applicationId}'
var contextRoot = ibmconfig.getContextRoot();
appContext=express.Router();
app.use(contextRoot, appContext);

console.log("contextRoot: " + contextRoot);

// log all requests
app.all('*', function(req, res, next) {
	console.log("Received request to " + req.url);
	next();
});

// create resource URIs
// endpoint: https://mobile.ng.bluemix.net/${appHostName}/v1/apps/${applicationId}/notifyOtherDevices/
appContext.post('/notifyOtherDevices', function(req,res) {
	var results = 'Sent notification to all registered devices successfully.';

	console.log("Trying to send push notification via JavaScript Push SDK");
	var message = { "alert" : "The data has been updated.",
					"url": "http://www.google.com"
	};

	req.ibmpush.sendBroadcastNotification(message,null).then(function (response) {
		console.log("Notification sent successfully to all devices.", response);
		res.send("Sent notification to all registered devices.");
	}, function(err) {
		console.log("Failed to send notification to all devices.");
		console.log(err);
		res.send(400, {reason: "An error occurred while sending the Push notification.", error: err});
	});
});

// host static files in public folder
// endpoint:  https://mobile.ng.bluemix.net/${appHostName}/v1/apps/${applicationId}/static/
appContext.use('/static', express.static('public'));

//redirect to cloudcode doc page when accessing the root context
app.get('/', function(req, res){
	res.sendfile('public/index.html');
});



*/